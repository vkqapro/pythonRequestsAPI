{"uid":"26d9886453a3705d","name":"test_drag_drop_card","fullName":"tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI#test_drag_drop_card","historyId":"756640991e527396b11efd4999ef7d0a","time":{"start":1738444677430,"stop":1738444677526,"duration":96},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI object at 0x7fc22db756e0>\n\n    @pytest.mark.TC004\n    def test_drag_drop_card(self):\n        new_list_name = 'NewAPIList_2'\n        with open(board_data_root, 'r') as file:\n            board_data = json.loads(file.read())\n    \n        # creating a new list \"NewAPIList_2\"\n        query_2 = {\n            'name': new_list_name,\n            'key': self.CREDENTIALS.key(),\n            'token': self.CREDENTIALS.token()\n        }\n    \n>       response = self.API_CALL.POST(\n            base_url=base_url,\n            endpoint=f\"{endpoint_boards}/{board_data['board_id']}/lists\",\n            query=query_2\n        )\n\ntests/regression/test_TrelloAPI_Regression.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.helpers.requests_API.ApiCalls object at 0x7fc22db77100>\nbase_url = 'https://api.trello.com/1/'\nendpoint = 'boards/679e8db92e6d4fe6139d1c9a/lists'\nquery = {'key': None, 'name': 'NewAPIList_2', 'token': None}\nheaders = {'Accept': 'application/json'}, expected_status_code = 200\n\n    def POST(self, base_url, endpoint, query, headers=None, expected_status_code=200):\n        if not headers:\n            headers = {\n                'Accept': \"application/json\"\n            }\n        r = requests.post(\n            url=base_url+endpoint,\n            headers=headers,\n            params=query\n        )\n>       assert r.status_code == expected_status_code\nE       AssertionError\n\nsrc/helpers/requests_API.py:19: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1738444677430,"stop":1738444677430,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI object at 0x7fc22db756e0>\n\n    @pytest.mark.TC004\n    def test_drag_drop_card(self):\n        new_list_name = 'NewAPIList_2'\n        with open(board_data_root, 'r') as file:\n            board_data = json.loads(file.read())\n    \n        # creating a new list \"NewAPIList_2\"\n        query_2 = {\n            'name': new_list_name,\n            'key': self.CREDENTIALS.key(),\n            'token': self.CREDENTIALS.token()\n        }\n    \n>       response = self.API_CALL.POST(\n            base_url=base_url,\n            endpoint=f\"{endpoint_boards}/{board_data['board_id']}/lists\",\n            query=query_2\n        )\n\ntests/regression/test_TrelloAPI_Regression.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.helpers.requests_API.ApiCalls object at 0x7fc22db77100>\nbase_url = 'https://api.trello.com/1/'\nendpoint = 'boards/679e8db92e6d4fe6139d1c9a/lists'\nquery = {'key': None, 'name': 'NewAPIList_2', 'token': None}\nheaders = {'Accept': 'application/json'}, expected_status_code = 200\n\n    def POST(self, base_url, endpoint, query, headers=None, expected_status_code=200):\n        if not headers:\n            headers = {\n                'Accept': \"application/json\"\n            }\n        r = requests.post(\n            url=base_url+endpoint,\n            headers=headers,\n            params=query\n        )\n>       assert r.status_code == expected_status_code\nE       AssertionError\n\nsrc/helpers/requests_API.py:19: AssertionError","steps":[],"attachments":[{"uid":"3bbfcf4401b2a9db","name":"log","source":"3bbfcf4401b2a9db.txt","type":"text/plain","size":271}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"suite","value":"Trello API Regression - Python Requests with Pytest and Allure reports"},{"name":"tag","value":"TC004"},{"name":"tag","value":"TC000"},{"name":"parentSuite","value":"tests.regression"},{"name":"subSuite","value":"TestTrelloRegressionAPI"},{"name":"host","value":"fv-az1296-243"},{"name":"thread","value":"2031-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.regression.test_TrelloAPI_Regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["TC004","TC000"]},"source":"26d9886453a3705d.json","parameterValues":[]}