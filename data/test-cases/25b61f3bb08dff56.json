{"uid":"25b61f3bb08dff56","name":"Create a board","fullName":"tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI#test_create_board","historyId":"d3ba667a5328582e40e8fe22080c78d0","time":{"start":1738444743434,"stop":1738444743521,"duration":87},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI object at 0x7fe3b8b55950>\n\n    @allure.title('Create a board')\n    @pytest.mark.TC001\n    def test_create_board(self):\n        query = {\n            'name': \"NewBoardAPI\",\n            'key': self.CREDENTIALS.key(),\n            'token': self.CREDENTIALS.token()\n        }\n        #### Create a new board #####\n>       result = self.API_CALL.POST(\n            base_url=base_url,\n            endpoint=endpoint_boards,\n            query=query\n        )\n\ntests/regression/test_TrelloAPI_Regression.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.helpers.requests_API.ApiCalls object at 0x7fe3b89be510>\nbase_url = 'https://api.trello.com/1/', endpoint = 'boards'\nquery = {'key': None, 'name': 'NewBoardAPI', 'token': None}\nheaders = {'Accept': 'application/json'}, expected_status_code = 200\n\n    def POST(self, base_url, endpoint, query, headers=None, expected_status_code=200):\n        if not headers:\n            headers = {\n                'Accept': \"application/json\"\n            }\n        r = requests.post(\n            url=base_url+endpoint,\n            headers=headers,\n            params=query\n        )\n>       assert r.status_code == expected_status_code\nE       AssertionError\n\nsrc/helpers/requests_API.py:19: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1738444743433,"stop":1738444743433,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI object at 0x7fe3b8b55950>\n\n    @allure.title('Create a board')\n    @pytest.mark.TC001\n    def test_create_board(self):\n        query = {\n            'name': \"NewBoardAPI\",\n            'key': self.CREDENTIALS.key(),\n            'token': self.CREDENTIALS.token()\n        }\n        #### Create a new board #####\n>       result = self.API_CALL.POST(\n            base_url=base_url,\n            endpoint=endpoint_boards,\n            query=query\n        )\n\ntests/regression/test_TrelloAPI_Regression.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.helpers.requests_API.ApiCalls object at 0x7fe3b89be510>\nbase_url = 'https://api.trello.com/1/', endpoint = 'boards'\nquery = {'key': None, 'name': 'NewBoardAPI', 'token': None}\nheaders = {'Accept': 'application/json'}, expected_status_code = 200\n\n    def POST(self, base_url, endpoint, query, headers=None, expected_status_code=200):\n        if not headers:\n            headers = {\n                'Accept': \"application/json\"\n            }\n        r = requests.post(\n            url=base_url+endpoint,\n            headers=headers,\n            params=query\n        )\n>       assert r.status_code == expected_status_code\nE       AssertionError\n\nsrc/helpers/requests_API.py:19: AssertionError","steps":[],"attachments":[{"uid":"f68ee23253e3b8b1","name":"log","source":"f68ee23253e3b8b1.txt","type":"text/plain","size":239}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"suite","value":"Trello API Regression - Python Requests with Pytest and Allure reports"},{"name":"tag","value":"TC001"},{"name":"tag","value":"TC000"},{"name":"parentSuite","value":"tests.regression"},{"name":"subSuite","value":"TestTrelloRegressionAPI"},{"name":"host","value":"fv-az2027-548"},{"name":"thread","value":"2048-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.regression.test_TrelloAPI_Regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["TC001","TC000"]},"source":"25b61f3bb08dff56.json","parameterValues":[]}