{"uid":"1e365e21c94e0d55","name":"test_archive_card","fullName":"tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI#test_archive_card","historyId":"b8c6b9be8cfd2f921fddad0ec0850295","time":{"start":1738444677605,"stop":1738444677656,"duration":51},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI object at 0x7fc22dbc0380>\n\n    @pytest.mark.TC006\n    def test_archive_card(self):\n        with open(board_data_root, 'r') as file:\n            board_data = json.load(file)\n    \n        query_card_deletion = {\n            'key': self.CREDENTIALS.key(),\n            'token': self.CREDENTIALS.token()\n        }\n>       response = self.API_CALL.DELETE(\n            base_url=base_url,\n            endpoint=f\"{endpoint_cards}/{board_data['card_id']}\",\n            query=query_card_deletion\n        )\n\ntests/regression/test_TrelloAPI_Regression.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.helpers.requests_API.ApiCalls object at 0x7fc22dbd5b50>\nbase_url = 'https://api.trello.com/1/'\nendpoint = 'cards/679e8dba18b91c9656d01acd'\nquery = {'key': None, 'token': None}, headers = {'Accept': 'application/json'}\nexpected_status_code = 200\n\n    def DELETE(self, base_url, endpoint, query, headers=None, expected_status_code=200):\n        if not headers:\n            headers = {\n                'Accept': 'application/json'\n            }\n        r = requests.delete(\n            url=base_url+endpoint,\n            headers=headers,\n            params=query\n        )\n>       assert r.status_code == expected_status_code\nE       AssertionError\n\nsrc/helpers/requests_API.py:46: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1738444677605,"stop":1738444677605,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <tests.regression.test_TrelloAPI_Regression.TestTrelloRegressionAPI object at 0x7fc22dbc0380>\n\n    @pytest.mark.TC006\n    def test_archive_card(self):\n        with open(board_data_root, 'r') as file:\n            board_data = json.load(file)\n    \n        query_card_deletion = {\n            'key': self.CREDENTIALS.key(),\n            'token': self.CREDENTIALS.token()\n        }\n>       response = self.API_CALL.DELETE(\n            base_url=base_url,\n            endpoint=f\"{endpoint_cards}/{board_data['card_id']}\",\n            query=query_card_deletion\n        )\n\ntests/regression/test_TrelloAPI_Regression.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.helpers.requests_API.ApiCalls object at 0x7fc22dbd5b50>\nbase_url = 'https://api.trello.com/1/'\nendpoint = 'cards/679e8dba18b91c9656d01acd'\nquery = {'key': None, 'token': None}, headers = {'Accept': 'application/json'}\nexpected_status_code = 200\n\n    def DELETE(self, base_url, endpoint, query, headers=None, expected_status_code=200):\n        if not headers:\n            headers = {\n                'Accept': 'application/json'\n            }\n        r = requests.delete(\n            url=base_url+endpoint,\n            headers=headers,\n            params=query\n        )\n>       assert r.status_code == expected_status_code\nE       AssertionError\n\nsrc/helpers/requests_API.py:46: AssertionError","steps":[],"attachments":[{"uid":"67bd63e1c9a08b4f","name":"log","source":"67bd63e1c9a08b4f.txt","type":"text/plain","size":248}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"suite","value":"Trello API Regression - Python Requests with Pytest and Allure reports"},{"name":"tag","value":"TC006"},{"name":"tag","value":"TC000"},{"name":"parentSuite","value":"tests.regression"},{"name":"subSuite","value":"TestTrelloRegressionAPI"},{"name":"host","value":"fv-az1296-243"},{"name":"thread","value":"2031-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.regression.test_TrelloAPI_Regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["TC006","TC000"]},"source":"1e365e21c94e0d55.json","parameterValues":[]}